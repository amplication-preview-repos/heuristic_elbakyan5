/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SocialPostService } from "../socialPost.service";
import { SocialPostCreateInput } from "./SocialPostCreateInput";
import { SocialPost } from "./SocialPost";
import { SocialPostFindManyArgs } from "./SocialPostFindManyArgs";
import { SocialPostWhereUniqueInput } from "./SocialPostWhereUniqueInput";
import { SocialPostUpdateInput } from "./SocialPostUpdateInput";
import { SocialPostWhereInput } from "./SocialPostWhereInput";

export class SocialPostControllerBase {
  constructor(protected readonly service: SocialPostService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SocialPost })
  async createSocialPost(
    @common.Body() data: SocialPostCreateInput
  ): Promise<SocialPost> {
    return await this.service.createSocialPost({
      data: data,
      select: {
        author: true,
        content: true,
        createdAt: true,
        datePosted: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SocialPost] })
  @ApiNestedQuery(SocialPostFindManyArgs)
  async socialPosts(@common.Req() request: Request): Promise<SocialPost[]> {
    const args = plainToClass(SocialPostFindManyArgs, request.query);
    return this.service.socialPosts({
      ...args,
      select: {
        author: true,
        content: true,
        createdAt: true,
        datePosted: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SocialPost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async socialPost(
    @common.Param() params: SocialPostWhereUniqueInput
  ): Promise<SocialPost | null> {
    const result = await this.service.socialPost({
      where: params,
      select: {
        author: true,
        content: true,
        createdAt: true,
        datePosted: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SocialPost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSocialPost(
    @common.Param() params: SocialPostWhereUniqueInput,
    @common.Body() data: SocialPostUpdateInput
  ): Promise<SocialPost | null> {
    try {
      return await this.service.updateSocialPost({
        where: params,
        data: data,
        select: {
          author: true,
          content: true,
          createdAt: true,
          datePosted: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SocialPost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSocialPost(
    @common.Param() params: SocialPostWhereUniqueInput
  ): Promise<SocialPost | null> {
    try {
      return await this.service.deleteSocialPost({
        where: params,
        select: {
          author: true,
          content: true,
          createdAt: true,
          datePosted: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/filter-and-sort-social-posts")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async FilterAndSortSocialPosts(
    @common.Body()
    body: SocialPostWhereInput
  ): Promise<string> {
    return this.service.FilterAndSortSocialPosts(body);
  }

  @common.Get("/social-posts/filter-sort-v2")
  @swagger.ApiOkResponse({
    type: SocialPost,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async FilterAndSortSocialPostsV2(
    @common.Body()
    body: SocialPostWhereInput
  ): Promise<SocialPost[]> {
    return this.service.FilterAndSortSocialPostsV2(body);
  }
}
