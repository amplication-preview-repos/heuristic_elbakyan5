/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SocialPost as PrismaSocialPost } from "@prisma/client";
import { SocialPostWhereInput } from "./SocialPostWhereInput";
import { SocialPost } from "./SocialPost";

export class SocialPostServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SocialPostCountArgs, "select">
  ): Promise<number> {
    return this.prisma.socialPost.count(args);
  }

  async socialPosts<T extends Prisma.SocialPostFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocialPostFindManyArgs>
  ): Promise<PrismaSocialPost[]> {
    return this.prisma.socialPost.findMany<Prisma.SocialPostFindManyArgs>(args);
  }
  async socialPost<T extends Prisma.SocialPostFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocialPostFindUniqueArgs>
  ): Promise<PrismaSocialPost | null> {
    return this.prisma.socialPost.findUnique(args);
  }
  async createSocialPost<T extends Prisma.SocialPostCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocialPostCreateArgs>
  ): Promise<PrismaSocialPost> {
    return this.prisma.socialPost.create<T>(args);
  }
  async updateSocialPost<T extends Prisma.SocialPostUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocialPostUpdateArgs>
  ): Promise<PrismaSocialPost> {
    return this.prisma.socialPost.update<T>(args);
  }
  async deleteSocialPost<T extends Prisma.SocialPostDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocialPostDeleteArgs>
  ): Promise<PrismaSocialPost> {
    return this.prisma.socialPost.delete(args);
  }
  async FilterAndSortSocialPosts(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async FilterAndSortSocialPostsV2(
    args: SocialPostWhereInput
  ): Promise<SocialPost[]> {
    throw new Error("Not implemented");
  }
}
