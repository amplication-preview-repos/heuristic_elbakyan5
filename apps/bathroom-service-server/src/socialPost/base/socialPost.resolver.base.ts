/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SocialPost } from "./SocialPost";
import { SocialPostCountArgs } from "./SocialPostCountArgs";
import { SocialPostFindManyArgs } from "./SocialPostFindManyArgs";
import { SocialPostFindUniqueArgs } from "./SocialPostFindUniqueArgs";
import { CreateSocialPostArgs } from "./CreateSocialPostArgs";
import { UpdateSocialPostArgs } from "./UpdateSocialPostArgs";
import { DeleteSocialPostArgs } from "./DeleteSocialPostArgs";
import { SocialPostWhereInput } from "./SocialPostWhereInput";
import { SocialPostService } from "../socialPost.service";
@graphql.Resolver(() => SocialPost)
export class SocialPostResolverBase {
  constructor(protected readonly service: SocialPostService) {}

  async _socialPostsMeta(
    @graphql.Args() args: SocialPostCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SocialPost])
  async socialPosts(
    @graphql.Args() args: SocialPostFindManyArgs
  ): Promise<SocialPost[]> {
    return this.service.socialPosts(args);
  }

  @graphql.Query(() => SocialPost, { nullable: true })
  async socialPost(
    @graphql.Args() args: SocialPostFindUniqueArgs
  ): Promise<SocialPost | null> {
    const result = await this.service.socialPost(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SocialPost)
  async createSocialPost(
    @graphql.Args() args: CreateSocialPostArgs
  ): Promise<SocialPost> {
    return await this.service.createSocialPost({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SocialPost)
  async updateSocialPost(
    @graphql.Args() args: UpdateSocialPostArgs
  ): Promise<SocialPost | null> {
    try {
      return await this.service.updateSocialPost({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SocialPost)
  async deleteSocialPost(
    @graphql.Args() args: DeleteSocialPostArgs
  ): Promise<SocialPost | null> {
    try {
      return await this.service.deleteSocialPost(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async FilterAndSortSocialPosts(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.FilterAndSortSocialPosts(args);
  }

  @graphql.Query(() => [SocialPost])
  async FilterAndSortSocialPostsV2(
    @graphql.Args()
    args: SocialPostWhereInput
  ): Promise<SocialPost[]> {
    return this.service.FilterAndSortSocialPostsV2(args);
  }
}
