/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BathroomService } from "../bathroom.service";
import { BathroomCreateInput } from "./BathroomCreateInput";
import { Bathroom } from "./Bathroom";
import { BathroomFindManyArgs } from "./BathroomFindManyArgs";
import { BathroomWhereUniqueInput } from "./BathroomWhereUniqueInput";
import { BathroomUpdateInput } from "./BathroomUpdateInput";
import { BathroomWhereInput } from "./BathroomWhereInput";

export class BathroomControllerBase {
  constructor(protected readonly service: BathroomService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bathroom })
  async createBathroom(
    @common.Body() data: BathroomCreateInput
  ): Promise<Bathroom> {
    return await this.service.createBathroom({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        rating: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bathroom] })
  @ApiNestedQuery(BathroomFindManyArgs)
  async bathrooms(@common.Req() request: Request): Promise<Bathroom[]> {
    const args = plainToClass(BathroomFindManyArgs, request.query);
    return this.service.bathrooms({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        rating: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bathroom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bathroom(
    @common.Param() params: BathroomWhereUniqueInput
  ): Promise<Bathroom | null> {
    const result = await this.service.bathroom({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        rating: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bathroom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBathroom(
    @common.Param() params: BathroomWhereUniqueInput,
    @common.Body() data: BathroomUpdateInput
  ): Promise<Bathroom | null> {
    try {
      return await this.service.updateBathroom({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          rating: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bathroom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBathroom(
    @common.Param() params: BathroomWhereUniqueInput
  ): Promise<Bathroom | null> {
    try {
      return await this.service.deleteBathroom({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          rating: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/filter-and-sort-bathrooms")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async FilterAndSortBathrooms(
    @common.Body()
    body: BathroomWhereInput
  ): Promise<string> {
    return this.service.FilterAndSortBathrooms(body);
  }

  @common.Get("/bathrooms/filter-sort-v2")
  @swagger.ApiOkResponse({
    type: Bathroom,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async FilterAndSortBathroomsV2(
    @common.Body()
    body: BathroomWhereInput
  ): Promise<Bathroom[]> {
    return this.service.FilterAndSortBathroomsV2(body);
  }
}
