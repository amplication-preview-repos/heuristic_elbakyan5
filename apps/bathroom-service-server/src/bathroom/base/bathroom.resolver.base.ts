/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bathroom } from "./Bathroom";
import { BathroomCountArgs } from "./BathroomCountArgs";
import { BathroomFindManyArgs } from "./BathroomFindManyArgs";
import { BathroomFindUniqueArgs } from "./BathroomFindUniqueArgs";
import { CreateBathroomArgs } from "./CreateBathroomArgs";
import { UpdateBathroomArgs } from "./UpdateBathroomArgs";
import { DeleteBathroomArgs } from "./DeleteBathroomArgs";
import { BathroomWhereInput } from "./BathroomWhereInput";
import { BathroomService } from "../bathroom.service";
@graphql.Resolver(() => Bathroom)
export class BathroomResolverBase {
  constructor(protected readonly service: BathroomService) {}

  async _bathroomsMeta(
    @graphql.Args() args: BathroomCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bathroom])
  async bathrooms(
    @graphql.Args() args: BathroomFindManyArgs
  ): Promise<Bathroom[]> {
    return this.service.bathrooms(args);
  }

  @graphql.Query(() => Bathroom, { nullable: true })
  async bathroom(
    @graphql.Args() args: BathroomFindUniqueArgs
  ): Promise<Bathroom | null> {
    const result = await this.service.bathroom(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bathroom)
  async createBathroom(
    @graphql.Args() args: CreateBathroomArgs
  ): Promise<Bathroom> {
    return await this.service.createBathroom({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Bathroom)
  async updateBathroom(
    @graphql.Args() args: UpdateBathroomArgs
  ): Promise<Bathroom | null> {
    try {
      return await this.service.updateBathroom({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bathroom)
  async deleteBathroom(
    @graphql.Args() args: DeleteBathroomArgs
  ): Promise<Bathroom | null> {
    try {
      return await this.service.deleteBathroom(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async FilterAndSortBathrooms(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.FilterAndSortBathrooms(args);
  }

  @graphql.Query(() => [Bathroom])
  async FilterAndSortBathroomsV2(
    @graphql.Args()
    args: BathroomWhereInput
  ): Promise<Bathroom[]> {
    return this.service.FilterAndSortBathroomsV2(args);
  }
}
